{"mappings":"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","sources":["node_modules/.pnpm/preact@10.12.1/node_modules/preact/src/util.js","node_modules/.pnpm/preact@10.12.1/node_modules/preact/src/options.js","node_modules/.pnpm/preact@10.12.1/node_modules/preact/src/create-element.js","node_modules/.pnpm/preact@10.12.1/node_modules/preact/src/diff/props.js","node_modules/.pnpm/preact@10.12.1/node_modules/preact/src/component.js","node_modules/.pnpm/preact@10.12.1/node_modules/preact/src/constants.js","node_modules/.pnpm/preact@10.12.1/node_modules/preact/src/diff/children.js","node_modules/.pnpm/preact@10.12.1/node_modules/preact/src/diff/index.js","node_modules/.pnpm/preact@10.12.1/node_modules/preact/src/render.js","node_modules/.pnpm/preact@10.12.1/node_modules/preact/src/diff/catch-error.js","node_modules/.pnpm/preact@10.12.1/node_modules/preact/jsx-runtime/src/index.js","src/index.tsx","src/app/app.tsx","src/app/app.module.scss"],"sourcesContent":["import { EMPTY_ARR } from \"./constants\";\n\n/**\n * Assign properties from `props` to `obj`\n * @template O, P The obj and props types\n * @param {O} obj The object to copy properties to\n * @param {P} props The object to copy properties from\n * @returns {O & P}\n */\nexport function assign(obj, props) {\n\t// @ts-ignore We change the type of `obj` to be `O & P`\n\tfor (let i in props) obj[i] = props[i];\n\treturn /** @type {O & P} */ (obj);\n}\n\n/**\n * Remove a child node from its parent if attached. This is a workaround for\n * IE11 which doesn't support `Element.prototype.remove()`. Using this function\n * is smaller than including a dedicated polyfill.\n * @param {Node} node The node to remove\n */\nexport function removeNode(node) {\n\tlet parentNode = node.parentNode;\n\tif (parentNode) parentNode.removeChild(node);\n}\n\nexport const slice = EMPTY_ARR.slice;\n","import { _catchError } from './diff/catch-error';\n\n/**\n * The `option` object can potentially contain callback functions\n * that are called during various stages of our renderer. This is the\n * foundation on which all our addons like `preact/debug`, `preact/compat`,\n * and `preact/hooks` are based on. See the `Options` type in `internal.d.ts`\n * for a full list of available option hooks (most editors/IDEs allow you to\n * ctrl+click or cmd+click on mac the type definition below).\n * @type {import('./internal').Options}\n */\nconst options = {\n\t_catchError\n};\n\nexport default options;\n","import { slice } from './util';\nimport options from './options';\n\nlet vnodeId = 0;\n\n/**\n * Create an virtual node (used for JSX)\n * @param {import('./internal').VNode[\"type\"]} type The node name or Component\n * constructor for this virtual node\n * @param {object | null | undefined} [props] The properties of the virtual node\n * @param {Array<import('.').ComponentChildren>} [children] The children of the virtual node\n * @returns {import('./internal').VNode}\n */\nexport function createElement(type, props, children) {\n\tlet normalizedProps = {},\n\t\tkey,\n\t\tref,\n\t\ti;\n\tfor (i in props) {\n\t\tif (i == 'key') key = props[i];\n\t\telse if (i == 'ref') ref = props[i];\n\t\telse normalizedProps[i] = props[i];\n\t}\n\n\tif (arguments.length > 2) {\n\t\tnormalizedProps.children =\n\t\t\targuments.length > 3 ? slice.call(arguments, 2) : children;\n\t}\n\n\t// If a Component VNode, check for and apply defaultProps\n\t// Note: type may be undefined in development, must never error here.\n\tif (typeof type == 'function' && type.defaultProps != null) {\n\t\tfor (i in type.defaultProps) {\n\t\t\tif (normalizedProps[i] === undefined) {\n\t\t\t\tnormalizedProps[i] = type.defaultProps[i];\n\t\t\t}\n\t\t}\n\t}\n\n\treturn createVNode(type, normalizedProps, key, ref, null);\n}\n\n/**\n * Create a VNode (used internally by Preact)\n * @param {import('./internal').VNode[\"type\"]} type The node name or Component\n * Constructor for this virtual node\n * @param {object | string | number | null} props The properties of this virtual node.\n * If this virtual node represents a text node, this is the text of the node (string or number).\n * @param {string | number | null} key The key for this virtual node, used when\n * diffing it against its children\n * @param {import('./internal').VNode[\"ref\"]} ref The ref property that will\n * receive a reference to its created child\n * @returns {import('./internal').VNode}\n */\nexport function createVNode(type, props, key, ref, original) {\n\t// V8 seems to be better at detecting type shapes if the object is allocated from the same call site\n\t// Do not inline into createElement and coerceToVNode!\n\tconst vnode = {\n\t\ttype,\n\t\tprops,\n\t\tkey,\n\t\tref,\n\t\t_children: null,\n\t\t_parent: null,\n\t\t_depth: 0,\n\t\t_dom: null,\n\t\t// _nextDom must be initialized to undefined b/c it will eventually\n\t\t// be set to dom.nextSibling which can return `null` and it is important\n\t\t// to be able to distinguish between an uninitialized _nextDom and\n\t\t// a _nextDom that has been set to `null`\n\t\t_nextDom: undefined,\n\t\t_component: null,\n\t\t_hydrating: null,\n\t\tconstructor: undefined,\n\t\t_original: original == null ? ++vnodeId : original\n\t};\n\n\t// Only invoke the vnode hook if this was *not* a direct copy:\n\tif (original == null && options.vnode != null) options.vnode(vnode);\n\n\treturn vnode;\n}\n\nexport function createRef() {\n\treturn { current: null };\n}\n\nexport function Fragment(props) {\n\treturn props.children;\n}\n\n/**\n * Check if a the argument is a valid Preact VNode.\n * @param {*} vnode\n * @returns {vnode is import('./internal').VNode}\n */\nexport const isValidElement = vnode =>\n\tvnode != null && vnode.constructor === undefined;\n","import { IS_NON_DIMENSIONAL } from '../constants';\nimport options from '../options';\n\n/**\n * Diff the old and new properties of a VNode and apply changes to the DOM node\n * @param {import('../internal').PreactElement} dom The DOM node to apply\n * changes to\n * @param {object} newProps The new props\n * @param {object} oldProps The old props\n * @param {boolean} isSvg Whether or not this node is an SVG node\n * @param {boolean} hydrate Whether or not we are in hydration mode\n */\nexport function diffProps(dom, newProps, oldProps, isSvg, hydrate) {\n\tlet i;\n\n\tfor (i in oldProps) {\n\t\tif (i !== 'children' && i !== 'key' && !(i in newProps)) {\n\t\t\tsetProperty(dom, i, null, oldProps[i], isSvg);\n\t\t}\n\t}\n\n\tfor (i in newProps) {\n\t\tif (\n\t\t\t(!hydrate || typeof newProps[i] == 'function') &&\n\t\t\ti !== 'children' &&\n\t\t\ti !== 'key' &&\n\t\t\ti !== 'value' &&\n\t\t\ti !== 'checked' &&\n\t\t\toldProps[i] !== newProps[i]\n\t\t) {\n\t\t\tsetProperty(dom, i, newProps[i], oldProps[i], isSvg);\n\t\t}\n\t}\n}\n\nfunction setStyle(style, key, value) {\n\tif (key[0] === '-') {\n\t\tstyle.setProperty(key, value == null ? '' : value);\n\t} else if (value == null) {\n\t\tstyle[key] = '';\n\t} else if (typeof value != 'number' || IS_NON_DIMENSIONAL.test(key)) {\n\t\tstyle[key] = value;\n\t} else {\n\t\tstyle[key] = value + 'px';\n\t}\n}\n\n/**\n * Set a property value on a DOM node\n * @param {import('../internal').PreactElement} dom The DOM node to modify\n * @param {string} name The name of the property to set\n * @param {*} value The value to set the property to\n * @param {*} oldValue The old value the property had\n * @param {boolean} isSvg Whether or not this DOM node is an SVG node or not\n */\nexport function setProperty(dom, name, value, oldValue, isSvg) {\n\tlet useCapture;\n\n\to: if (name === 'style') {\n\t\tif (typeof value == 'string') {\n\t\t\tdom.style.cssText = value;\n\t\t} else {\n\t\t\tif (typeof oldValue == 'string') {\n\t\t\t\tdom.style.cssText = oldValue = '';\n\t\t\t}\n\n\t\t\tif (oldValue) {\n\t\t\t\tfor (name in oldValue) {\n\t\t\t\t\tif (!(value && name in value)) {\n\t\t\t\t\t\tsetStyle(dom.style, name, '');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (value) {\n\t\t\t\tfor (name in value) {\n\t\t\t\t\tif (!oldValue || value[name] !== oldValue[name]) {\n\t\t\t\t\t\tsetStyle(dom.style, name, value[name]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t// Benchmark for comparison: https://esbench.com/bench/574c954bdb965b9a00965ac6\n\telse if (name[0] === 'o' && name[1] === 'n') {\n\t\tuseCapture = name !== (name = name.replace(/Capture$/, ''));\n\n\t\t// Infer correct casing for DOM built-in events:\n\t\tif (name.toLowerCase() in dom) name = name.toLowerCase().slice(2);\n\t\telse name = name.slice(2);\n\n\t\tif (!dom._listeners) dom._listeners = {};\n\t\tdom._listeners[name + useCapture] = value;\n\n\t\tif (value) {\n\t\t\tif (!oldValue) {\n\t\t\t\tconst handler = useCapture ? eventProxyCapture : eventProxy;\n\t\t\t\tdom.addEventListener(name, handler, useCapture);\n\t\t\t}\n\t\t} else {\n\t\t\tconst handler = useCapture ? eventProxyCapture : eventProxy;\n\t\t\tdom.removeEventListener(name, handler, useCapture);\n\t\t}\n\t} else if (name !== 'dangerouslySetInnerHTML') {\n\t\tif (isSvg) {\n\t\t\t// Normalize incorrect prop usage for SVG:\n\t\t\t// - xlink:href / xlinkHref --> href (xlink:href was removed from SVG and isn't needed)\n\t\t\t// - className --> class\n\t\t\tname = name.replace(/xlink(H|:h)/, 'h').replace(/sName$/, 's');\n\t\t} else if (\n\t\t\tname !== 'width' &&\n\t\t\tname !== 'height' &&\n\t\t\tname !== 'href' &&\n\t\t\tname !== 'list' &&\n\t\t\tname !== 'form' &&\n\t\t\t// Default value in browsers is `-1` and an empty string is\n\t\t\t// cast to `0` instead\n\t\t\tname !== 'tabIndex' &&\n\t\t\tname !== 'download' &&\n\t\t\tname in dom\n\t\t) {\n\t\t\ttry {\n\t\t\t\tdom[name] = value == null ? '' : value;\n\t\t\t\t// labelled break is 1b smaller here than a return statement (sorry)\n\t\t\t\tbreak o;\n\t\t\t} catch (e) {}\n\t\t}\n\n\t\t// ARIA-attributes have a different notion of boolean values.\n\t\t// The value `false` is different from the attribute not\n\t\t// existing on the DOM, so we can't remove it. For non-boolean\n\t\t// ARIA-attributes we could treat false as a removal, but the\n\t\t// amount of exceptions would cost us too many bytes. On top of\n\t\t// that other VDOM frameworks also always stringify `false`.\n\n\t\tif (typeof value === 'function') {\n\t\t\t// never serialize functions as attribute values\n\t\t} else if (value != null && (value !== false || name.indexOf('-') != -1)) {\n\t\t\tdom.setAttribute(name, value);\n\t\t} else {\n\t\t\tdom.removeAttribute(name);\n\t\t}\n\t}\n}\n\nexport let inEvent = false;\n\n/**\n * Proxy an event to hooked event handlers\n * @param {Event} e The event object from the browser\n * @private\n */\nfunction eventProxy(e) {\n\tinEvent = true;\n\ttry {\n\t\treturn this._listeners[e.type + false](\n\t\t\toptions.event ? options.event(e) : e\n\t\t);\n\t} finally {\n\t\tinEvent = false;\n\t}\n}\n\nfunction eventProxyCapture(e) {\n\tinEvent = true;\n\ttry {\n\t\treturn this._listeners[e.type + true](options.event ? options.event(e) : e);\n\t} finally {\n\t\tinEvent = false;\n\t}\n}\n","import { assign } from './util';\nimport { diff, commitRoot } from './diff/index';\nimport options from './options';\nimport { Fragment } from './create-element';\nimport { inEvent } from './diff/props';\n\n/**\n * Base Component class. Provides `setState()` and `forceUpdate()`, which\n * trigger rendering\n * @param {object} props The initial component props\n * @param {object} context The initial context from parent components'\n * getChildContext\n */\nexport function Component(props, context) {\n\tthis.props = props;\n\tthis.context = context;\n}\n\n/**\n * Update component state and schedule a re-render.\n * @this {import('./internal').Component}\n * @param {object | ((s: object, p: object) => object)} update A hash of state\n * properties to update with new values or a function that given the current\n * state and props returns a new partial state\n * @param {() => void} [callback] A function to be called once component state is\n * updated\n */\nComponent.prototype.setState = function(update, callback) {\n\t// only clone state when copying to nextState the first time.\n\tlet s;\n\tif (this._nextState != null && this._nextState !== this.state) {\n\t\ts = this._nextState;\n\t} else {\n\t\ts = this._nextState = assign({}, this.state);\n\t}\n\n\tif (typeof update == 'function') {\n\t\t// Some libraries like `immer` mark the current state as readonly,\n\t\t// preventing us from mutating it, so we need to clone it. See #2716\n\t\tupdate = update(assign({}, s), this.props);\n\t}\n\n\tif (update) {\n\t\tassign(s, update);\n\t}\n\n\t// Skip update if updater function returned null\n\tif (update == null) return;\n\n\tif (this._vnode) {\n\t\tif (callback) {\n\t\t\tthis._stateCallbacks.push(callback);\n\t\t}\n\t\tenqueueRender(this);\n\t}\n};\n\n/**\n * Immediately perform a synchronous re-render of the component\n * @this {import('./internal').Component}\n * @param {() => void} [callback] A function to be called after component is\n * re-rendered\n */\nComponent.prototype.forceUpdate = function(callback) {\n\tif (this._vnode) {\n\t\t// Set render mode so that we can differentiate where the render request\n\t\t// is coming from. We need this because forceUpdate should never call\n\t\t// shouldComponentUpdate\n\t\tthis._force = true;\n\t\tif (callback) this._renderCallbacks.push(callback);\n\t\tenqueueRender(this);\n\t}\n};\n\n/**\n * Accepts `props` and `state`, and returns a new Virtual DOM tree to build.\n * Virtual DOM is generally constructed via [JSX](http://jasonformat.com/wtf-is-jsx).\n * @param {object} props Props (eg: JSX attributes) received from parent\n * element/component\n * @param {object} state The component's current state\n * @param {object} context Context object, as returned by the nearest\n * ancestor's `getChildContext()`\n * @returns {import('./index').ComponentChildren | void}\n */\nComponent.prototype.render = Fragment;\n\n/**\n * @param {import('./internal').VNode} vnode\n * @param {number | null} [childIndex]\n */\nexport function getDomSibling(vnode, childIndex) {\n\tif (childIndex == null) {\n\t\t// Use childIndex==null as a signal to resume the search from the vnode's sibling\n\t\treturn vnode._parent\n\t\t\t? getDomSibling(vnode._parent, vnode._parent._children.indexOf(vnode) + 1)\n\t\t\t: null;\n\t}\n\n\tlet sibling;\n\tfor (; childIndex < vnode._children.length; childIndex++) {\n\t\tsibling = vnode._children[childIndex];\n\n\t\tif (sibling != null && sibling._dom != null) {\n\t\t\t// Since updateParentDomPointers keeps _dom pointer correct,\n\t\t\t// we can rely on _dom to tell us if this subtree contains a\n\t\t\t// rendered DOM node, and what the first rendered DOM node is\n\t\t\treturn sibling._dom;\n\t\t}\n\t}\n\n\t// If we get here, we have not found a DOM node in this vnode's children.\n\t// We must resume from this vnode's sibling (in it's parent _children array)\n\t// Only climb up and search the parent if we aren't searching through a DOM\n\t// VNode (meaning we reached the DOM parent of the original vnode that began\n\t// the search)\n\treturn typeof vnode.type == 'function' ? getDomSibling(vnode) : null;\n}\n\n/**\n * Trigger in-place re-rendering of a component.\n * @param {import('./internal').Component} component The component to rerender\n */\nfunction renderComponent(component) {\n\tlet vnode = component._vnode,\n\t\toldDom = vnode._dom,\n\t\tparentDom = component._parentDom;\n\n\tif (parentDom) {\n\t\tlet commitQueue = [];\n\t\tconst oldVNode = assign({}, vnode);\n\t\toldVNode._original = vnode._original + 1;\n\n\t\tdiff(\n\t\t\tparentDom,\n\t\t\tvnode,\n\t\t\toldVNode,\n\t\t\tcomponent._globalContext,\n\t\t\tparentDom.ownerSVGElement !== undefined,\n\t\t\tvnode._hydrating != null ? [oldDom] : null,\n\t\t\tcommitQueue,\n\t\t\toldDom == null ? getDomSibling(vnode) : oldDom,\n\t\t\tvnode._hydrating\n\t\t);\n\t\tcommitRoot(commitQueue, vnode);\n\n\t\tif (vnode._dom != oldDom) {\n\t\t\tupdateParentDomPointers(vnode);\n\t\t}\n\t}\n}\n\n/**\n * @param {import('./internal').VNode} vnode\n */\nfunction updateParentDomPointers(vnode) {\n\tif ((vnode = vnode._parent) != null && vnode._component != null) {\n\t\tvnode._dom = vnode._component.base = null;\n\t\tfor (let i = 0; i < vnode._children.length; i++) {\n\t\t\tlet child = vnode._children[i];\n\t\t\tif (child != null && child._dom != null) {\n\t\t\t\tvnode._dom = vnode._component.base = child._dom;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\treturn updateParentDomPointers(vnode);\n\t}\n}\n\n/**\n * The render queue\n * @type {Array<import('./internal').Component>}\n */\nlet rerenderQueue = [];\n\n/*\n * The value of `Component.debounce` must asynchronously invoke the passed in callback. It is\n * important that contributors to Preact can consistently reason about what calls to `setState`, etc.\n * do, and when their effects will be applied. See the links below for some further reading on designing\n * asynchronous APIs.\n * * [Designing APIs for Asynchrony](https://blog.izs.me/2013/08/designing-apis-for-asynchrony)\n * * [Callbacks synchronous and asynchronous](https://blog.ometer.com/2011/07/24/callbacks-synchronous-and-asynchronous/)\n */\n\nlet prevDebounce;\n\nconst microTick =\n\ttypeof Promise == 'function'\n\t\t? Promise.prototype.then.bind(Promise.resolve())\n\t\t: setTimeout;\nfunction defer(cb) {\n\tif (inEvent) {\n\t\tsetTimeout(cb);\n\t} else {\n\t\tmicroTick(cb);\n\t}\n}\n\n/**\n * Enqueue a rerender of a component\n * @param {import('./internal').Component} c The component to rerender\n */\nexport function enqueueRender(c) {\n\tif (\n\t\t(!c._dirty &&\n\t\t\t(c._dirty = true) &&\n\t\t\trerenderQueue.push(c) &&\n\t\t\t!process._rerenderCount++) ||\n\t\tprevDebounce !== options.debounceRendering\n\t) {\n\t\tprevDebounce = options.debounceRendering;\n\t\t(prevDebounce || defer)(process);\n\t}\n}\n\n/** Flush the render queue by rerendering all queued components */\nfunction process() {\n\tlet c;\n\trerenderQueue.sort((a, b) => a._vnode._depth - b._vnode._depth);\n\t// Don't update `renderCount` yet. Keep its value non-zero to prevent unnecessary\n\t// process() calls from getting scheduled while `queue` is still being consumed.\n\twhile ((c = rerenderQueue.shift())) {\n\t\tif (c._dirty) {\n\t\t\tlet renderQueueLength = rerenderQueue.length;\n\t\t\trenderComponent(c);\n\t\t\tif (rerenderQueue.length > renderQueueLength) {\n\t\t\t\t// When i.e. rerendering a provider additional new items can be injected, we want to\n\t\t\t\t// keep the order from top to bottom with those new items so we can handle them in a\n\t\t\t\t// single pass\n\t\t\t\trerenderQueue.sort((a, b) => a._vnode._depth - b._vnode._depth);\n\t\t\t}\n\t\t}\n\t}\n\tprocess._rerenderCount = 0;\n}\n\nprocess._rerenderCount = 0;\n","export const EMPTY_OBJ = {};\nexport const EMPTY_ARR = [];\nexport const IS_NON_DIMENSIONAL = /acit|ex(?:s|g|n|p|$)|rph|grid|ows|mnc|ntw|ine[ch]|zoo|^ord|itera/i;\n","import { diff, unmount, applyRef } from './index';\nimport { createVNode, Fragment } from '../create-element';\nimport { EMPTY_OBJ, EMPTY_ARR } from '../constants';\nimport { getDomSibling } from '../component';\n\n/**\n * Diff the children of a virtual node\n * @param {import('../internal').PreactElement} parentDom The DOM element whose\n * children are being diffed\n * @param {import('../internal').ComponentChildren[]} renderResult\n * @param {import('../internal').VNode} newParentVNode The new virtual\n * node whose children should be diff'ed against oldParentVNode\n * @param {import('../internal').VNode} oldParentVNode The old virtual\n * node whose children should be diff'ed against newParentVNode\n * @param {object} globalContext The current context object - modified by getChildContext\n * @param {boolean} isSvg Whether or not this DOM node is an SVG node\n * @param {Array<import('../internal').PreactElement>} excessDomChildren\n * @param {Array<import('../internal').Component>} commitQueue List of components\n * which have callbacks to invoke in commitRoot\n * @param {import('../internal').PreactElement} oldDom The current attached DOM\n * element any new dom elements should be placed around. Likely `null` on first\n * render (except when hydrating). Can be a sibling DOM element when diffing\n * Fragments that have siblings. In most cases, it starts out as `oldChildren[0]._dom`.\n * @param {boolean} isHydrating Whether or not we are in hydration\n */\nexport function diffChildren(\n\tparentDom,\n\trenderResult,\n\tnewParentVNode,\n\toldParentVNode,\n\tglobalContext,\n\tisSvg,\n\texcessDomChildren,\n\tcommitQueue,\n\toldDom,\n\tisHydrating\n) {\n\tlet i, j, oldVNode, childVNode, newDom, firstChildDom, refs;\n\n\t// This is a compression of oldParentVNode!=null && oldParentVNode != EMPTY_OBJ && oldParentVNode._children || EMPTY_ARR\n\t// as EMPTY_OBJ._children should be `undefined`.\n\tlet oldChildren = (oldParentVNode && oldParentVNode._children) || EMPTY_ARR;\n\n\tlet oldChildrenLength = oldChildren.length;\n\n\tnewParentVNode._children = [];\n\tfor (i = 0; i < renderResult.length; i++) {\n\t\tchildVNode = renderResult[i];\n\n\t\tif (childVNode == null || typeof childVNode == 'boolean') {\n\t\t\tchildVNode = newParentVNode._children[i] = null;\n\t\t}\n\t\t// If this newVNode is being reused (e.g. <div>{reuse}{reuse}</div>) in the same diff,\n\t\t// or we are rendering a component (e.g. setState) copy the oldVNodes so it can have\n\t\t// it's own DOM & etc. pointers\n\t\telse if (\n\t\t\ttypeof childVNode == 'string' ||\n\t\t\ttypeof childVNode == 'number' ||\n\t\t\t// eslint-disable-next-line valid-typeof\n\t\t\ttypeof childVNode == 'bigint'\n\t\t) {\n\t\t\tchildVNode = newParentVNode._children[i] = createVNode(\n\t\t\t\tnull,\n\t\t\t\tchildVNode,\n\t\t\t\tnull,\n\t\t\t\tnull,\n\t\t\t\tchildVNode\n\t\t\t);\n\t\t} else if (Array.isArray(childVNode)) {\n\t\t\tchildVNode = newParentVNode._children[i] = createVNode(\n\t\t\t\tFragment,\n\t\t\t\t{ children: childVNode },\n\t\t\t\tnull,\n\t\t\t\tnull,\n\t\t\t\tnull\n\t\t\t);\n\t\t} else if (childVNode._depth > 0) {\n\t\t\t// VNode is already in use, clone it. This can happen in the following\n\t\t\t// scenario:\n\t\t\t//   const reuse = <div />\n\t\t\t//   <div>{reuse}<span />{reuse}</div>\n\t\t\tchildVNode = newParentVNode._children[i] = createVNode(\n\t\t\t\tchildVNode.type,\n\t\t\t\tchildVNode.props,\n\t\t\t\tchildVNode.key,\n\t\t\t\tchildVNode.ref ? childVNode.ref : null,\n\t\t\t\tchildVNode._original\n\t\t\t);\n\t\t} else {\n\t\t\tchildVNode = newParentVNode._children[i] = childVNode;\n\t\t}\n\n\t\t// Terser removes the `continue` here and wraps the loop body\n\t\t// in a `if (childVNode) { ... } condition\n\t\tif (childVNode == null) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tchildVNode._parent = newParentVNode;\n\t\tchildVNode._depth = newParentVNode._depth + 1;\n\n\t\t// Check if we find a corresponding element in oldChildren.\n\t\t// If found, delete the array item by setting to `undefined`.\n\t\t// We use `undefined`, as `null` is reserved for empty placeholders\n\t\t// (holes).\n\t\toldVNode = oldChildren[i];\n\n\t\tif (\n\t\t\toldVNode === null ||\n\t\t\t(oldVNode &&\n\t\t\t\tchildVNode.key == oldVNode.key &&\n\t\t\t\tchildVNode.type === oldVNode.type)\n\t\t) {\n\t\t\toldChildren[i] = undefined;\n\t\t} else {\n\t\t\t// Either oldVNode === undefined or oldChildrenLength > 0,\n\t\t\t// so after this loop oldVNode == null or oldVNode is a valid value.\n\t\t\tfor (j = 0; j < oldChildrenLength; j++) {\n\t\t\t\toldVNode = oldChildren[j];\n\t\t\t\t// If childVNode is unkeyed, we only match similarly unkeyed nodes, otherwise we match by key.\n\t\t\t\t// We always match by type (in either case).\n\t\t\t\tif (\n\t\t\t\t\toldVNode &&\n\t\t\t\t\tchildVNode.key == oldVNode.key &&\n\t\t\t\t\tchildVNode.type === oldVNode.type\n\t\t\t\t) {\n\t\t\t\t\toldChildren[j] = undefined;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\toldVNode = null;\n\t\t\t}\n\t\t}\n\n\t\toldVNode = oldVNode || EMPTY_OBJ;\n\n\t\t// Morph the old element into the new one, but don't append it to the dom yet\n\t\tdiff(\n\t\t\tparentDom,\n\t\t\tchildVNode,\n\t\t\toldVNode,\n\t\t\tglobalContext,\n\t\t\tisSvg,\n\t\t\texcessDomChildren,\n\t\t\tcommitQueue,\n\t\t\toldDom,\n\t\t\tisHydrating\n\t\t);\n\n\t\tnewDom = childVNode._dom;\n\n\t\tif ((j = childVNode.ref) && oldVNode.ref != j) {\n\t\t\tif (!refs) refs = [];\n\t\t\tif (oldVNode.ref) refs.push(oldVNode.ref, null, childVNode);\n\t\t\trefs.push(j, childVNode._component || newDom, childVNode);\n\t\t}\n\n\t\tif (newDom != null) {\n\t\t\tif (firstChildDom == null) {\n\t\t\t\tfirstChildDom = newDom;\n\t\t\t}\n\n\t\t\tif (\n\t\t\t\ttypeof childVNode.type == 'function' &&\n\t\t\t\tchildVNode._children === oldVNode._children\n\t\t\t) {\n\t\t\t\tchildVNode._nextDom = oldDom = reorderChildren(\n\t\t\t\t\tchildVNode,\n\t\t\t\t\toldDom,\n\t\t\t\t\tparentDom\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\toldDom = placeChild(\n\t\t\t\t\tparentDom,\n\t\t\t\t\tchildVNode,\n\t\t\t\t\toldVNode,\n\t\t\t\t\toldChildren,\n\t\t\t\t\tnewDom,\n\t\t\t\t\toldDom\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tif (typeof newParentVNode.type == 'function') {\n\t\t\t\t// Because the newParentVNode is Fragment-like, we need to set it's\n\t\t\t\t// _nextDom property to the nextSibling of its last child DOM node.\n\t\t\t\t//\n\t\t\t\t// `oldDom` contains the correct value here because if the last child\n\t\t\t\t// is a Fragment-like, then oldDom has already been set to that child's _nextDom.\n\t\t\t\t// If the last child is a DOM VNode, then oldDom will be set to that DOM\n\t\t\t\t// node's nextSibling.\n\t\t\t\tnewParentVNode._nextDom = oldDom;\n\t\t\t}\n\t\t} else if (\n\t\t\toldDom &&\n\t\t\toldVNode._dom == oldDom &&\n\t\t\toldDom.parentNode != parentDom\n\t\t) {\n\t\t\t// The above condition is to handle null placeholders. See test in placeholder.test.js:\n\t\t\t// `efficiently replace null placeholders in parent rerenders`\n\t\t\toldDom = getDomSibling(oldVNode);\n\t\t}\n\t}\n\n\tnewParentVNode._dom = firstChildDom;\n\n\t// Remove remaining oldChildren if there are any.\n\tfor (i = oldChildrenLength; i--; ) {\n\t\tif (oldChildren[i] != null) {\n\t\t\tif (\n\t\t\t\ttypeof newParentVNode.type == 'function' &&\n\t\t\t\toldChildren[i]._dom != null &&\n\t\t\t\toldChildren[i]._dom == newParentVNode._nextDom\n\t\t\t) {\n\t\t\t\t// If the newParentVNode.__nextDom points to a dom node that is about to\n\t\t\t\t// be unmounted, then get the next sibling of that vnode and set\n\t\t\t\t// _nextDom to it\n\t\t\t\tnewParentVNode._nextDom = getLastDom(oldParentVNode).nextSibling;\n\t\t\t}\n\n\t\t\tunmount(oldChildren[i], oldChildren[i]);\n\t\t}\n\t}\n\n\t// Set refs only after unmount\n\tif (refs) {\n\t\tfor (i = 0; i < refs.length; i++) {\n\t\t\tapplyRef(refs[i], refs[++i], refs[++i]);\n\t\t}\n\t}\n}\n\nfunction reorderChildren(childVNode, oldDom, parentDom) {\n\t// Note: VNodes in nested suspended trees may be missing _children.\n\tlet c = childVNode._children;\n\tlet tmp = 0;\n\tfor (; c && tmp < c.length; tmp++) {\n\t\tlet vnode = c[tmp];\n\t\tif (vnode) {\n\t\t\t// We typically enter this code path on sCU bailout, where we copy\n\t\t\t// oldVNode._children to newVNode._children. If that is the case, we need\n\t\t\t// to update the old children's _parent pointer to point to the newVNode\n\t\t\t// (childVNode here).\n\t\t\tvnode._parent = childVNode;\n\n\t\t\tif (typeof vnode.type == 'function') {\n\t\t\t\toldDom = reorderChildren(vnode, oldDom, parentDom);\n\t\t\t} else {\n\t\t\t\toldDom = placeChild(parentDom, vnode, vnode, c, vnode._dom, oldDom);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn oldDom;\n}\n\n/**\n * Flatten and loop through the children of a virtual node\n * @param {import('../index').ComponentChildren} children The unflattened\n * children of a virtual node\n * @returns {import('../internal').VNode[]}\n */\nexport function toChildArray(children, out) {\n\tout = out || [];\n\tif (children == null || typeof children == 'boolean') {\n\t} else if (Array.isArray(children)) {\n\t\tchildren.some(child => {\n\t\t\ttoChildArray(child, out);\n\t\t});\n\t} else {\n\t\tout.push(children);\n\t}\n\treturn out;\n}\n\nfunction placeChild(\n\tparentDom,\n\tchildVNode,\n\toldVNode,\n\toldChildren,\n\tnewDom,\n\toldDom\n) {\n\tlet nextDom;\n\tif (childVNode._nextDom !== undefined) {\n\t\t// Only Fragments or components that return Fragment like VNodes will\n\t\t// have a non-undefined _nextDom. Continue the diff from the sibling\n\t\t// of last DOM child of this child VNode\n\t\tnextDom = childVNode._nextDom;\n\n\t\t// Eagerly cleanup _nextDom. We don't need to persist the value because\n\t\t// it is only used by `diffChildren` to determine where to resume the diff after\n\t\t// diffing Components and Fragments. Once we store it the nextDOM local var, we\n\t\t// can clean up the property\n\t\tchildVNode._nextDom = undefined;\n\t} else if (\n\t\toldVNode == null ||\n\t\tnewDom != oldDom ||\n\t\tnewDom.parentNode == null\n\t) {\n\t\touter: if (oldDom == null || oldDom.parentNode !== parentDom) {\n\t\t\tparentDom.appendChild(newDom);\n\t\t\tnextDom = null;\n\t\t} else {\n\t\t\t// `j<oldChildrenLength; j+=2` is an alternative to `j++<oldChildrenLength/2`\n\t\t\tfor (\n\t\t\t\tlet sibDom = oldDom, j = 0;\n\t\t\t\t(sibDom = sibDom.nextSibling) && j < oldChildren.length;\n\t\t\t\tj += 1\n\t\t\t) {\n\t\t\t\tif (sibDom == newDom) {\n\t\t\t\t\tbreak outer;\n\t\t\t\t}\n\t\t\t}\n\t\t\tparentDom.insertBefore(newDom, oldDom);\n\t\t\tnextDom = oldDom;\n\t\t}\n\t}\n\n\t// If we have pre-calculated the nextDOM node, use it. Else calculate it now\n\t// Strictly check for `undefined` here cuz `null` is a valid value of `nextDom`.\n\t// See more detail in create-element.js:createVNode\n\tif (nextDom !== undefined) {\n\t\toldDom = nextDom;\n\t} else {\n\t\toldDom = newDom.nextSibling;\n\t}\n\n\treturn oldDom;\n}\n\n/**\n * @param {import('../internal').VNode} vnode\n */\nfunction getLastDom(vnode) {\n\tif (vnode.type == null || typeof vnode.type === 'string') {\n\t\treturn vnode._dom;\n\t}\n\n\tif (vnode._children) {\n\t\tfor (let i = vnode._children.length - 1; i >= 0; i--) {\n\t\t\tlet child = vnode._children[i];\n\t\t\tif (child) {\n\t\t\t\tlet lastDom = getLastDom(child);\n\t\t\t\tif (lastDom) {\n\t\t\t\t\treturn lastDom;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn null;\n}\n","import { EMPTY_OBJ } from '../constants';\nimport { Component, getDomSibling } from '../component';\nimport { Fragment } from '../create-element';\nimport { diffChildren } from './children';\nimport { diffProps, setProperty } from './props';\nimport { assign, removeNode, slice } from '../util';\nimport options from '../options';\n\n/**\n * Diff two virtual nodes and apply proper changes to the DOM\n * @param {import('../internal').PreactElement} parentDom The parent of the DOM element\n * @param {import('../internal').VNode} newVNode The new virtual node\n * @param {import('../internal').VNode} oldVNode The old virtual node\n * @param {object} globalContext The current context object. Modified by getChildContext\n * @param {boolean} isSvg Whether or not this element is an SVG node\n * @param {Array<import('../internal').PreactElement>} excessDomChildren\n * @param {Array<import('../internal').Component>} commitQueue List of components\n * which have callbacks to invoke in commitRoot\n * @param {import('../internal').PreactElement} oldDom The current attached DOM\n * element any new dom elements should be placed around. Likely `null` on first\n * render (except when hydrating). Can be a sibling DOM element when diffing\n * Fragments that have siblings. In most cases, it starts out as `oldChildren[0]._dom`.\n * @param {boolean} [isHydrating] Whether or not we are in hydration\n */\nexport function diff(\n\tparentDom,\n\tnewVNode,\n\toldVNode,\n\tglobalContext,\n\tisSvg,\n\texcessDomChildren,\n\tcommitQueue,\n\toldDom,\n\tisHydrating\n) {\n\tlet tmp,\n\t\tnewType = newVNode.type;\n\n\t// When passing through createElement it assigns the object\n\t// constructor as undefined. This to prevent JSON-injection.\n\tif (newVNode.constructor !== undefined) return null;\n\n\t// If the previous diff bailed out, resume creating/hydrating.\n\tif (oldVNode._hydrating != null) {\n\t\tisHydrating = oldVNode._hydrating;\n\t\toldDom = newVNode._dom = oldVNode._dom;\n\t\t// if we resume, we want the tree to be \"unlocked\"\n\t\tnewVNode._hydrating = null;\n\t\texcessDomChildren = [oldDom];\n\t}\n\n\tif ((tmp = options._diff)) tmp(newVNode);\n\n\ttry {\n\t\touter: if (typeof newType == 'function') {\n\t\t\tlet c, isNew, oldProps, oldState, snapshot, clearProcessingException;\n\t\t\tlet newProps = newVNode.props;\n\n\t\t\t// Necessary for createContext api. Setting this property will pass\n\t\t\t// the context value as `this.context` just for this component.\n\t\t\ttmp = newType.contextType;\n\t\t\tlet provider = tmp && globalContext[tmp._id];\n\t\t\tlet componentContext = tmp\n\t\t\t\t? provider\n\t\t\t\t\t? provider.props.value\n\t\t\t\t\t: tmp._defaultValue\n\t\t\t\t: globalContext;\n\n\t\t\t// Get component and set it to `c`\n\t\t\tif (oldVNode._component) {\n\t\t\t\tc = newVNode._component = oldVNode._component;\n\t\t\t\tclearProcessingException = c._processingException = c._pendingError;\n\t\t\t} else {\n\t\t\t\t// Instantiate the new component\n\t\t\t\tif ('prototype' in newType && newType.prototype.render) {\n\t\t\t\t\t// @ts-ignore The check above verifies that newType is suppose to be constructed\n\t\t\t\t\tnewVNode._component = c = new newType(newProps, componentContext); // eslint-disable-line new-cap\n\t\t\t\t} else {\n\t\t\t\t\t// @ts-ignore Trust me, Component implements the interface we want\n\t\t\t\t\tnewVNode._component = c = new Component(newProps, componentContext);\n\t\t\t\t\tc.constructor = newType;\n\t\t\t\t\tc.render = doRender;\n\t\t\t\t}\n\t\t\t\tif (provider) provider.sub(c);\n\n\t\t\t\tc.props = newProps;\n\t\t\t\tif (!c.state) c.state = {};\n\t\t\t\tc.context = componentContext;\n\t\t\t\tc._globalContext = globalContext;\n\t\t\t\tisNew = c._dirty = true;\n\t\t\t\tc._renderCallbacks = [];\n\t\t\t\tc._stateCallbacks = [];\n\t\t\t}\n\n\t\t\t// Invoke getDerivedStateFromProps\n\t\t\tif (c._nextState == null) {\n\t\t\t\tc._nextState = c.state;\n\t\t\t}\n\n\t\t\tif (newType.getDerivedStateFromProps != null) {\n\t\t\t\tif (c._nextState == c.state) {\n\t\t\t\t\tc._nextState = assign({}, c._nextState);\n\t\t\t\t}\n\n\t\t\t\tassign(\n\t\t\t\t\tc._nextState,\n\t\t\t\t\tnewType.getDerivedStateFromProps(newProps, c._nextState)\n\t\t\t\t);\n\t\t\t}\n\n\t\t\toldProps = c.props;\n\t\t\toldState = c.state;\n\t\t\tc._vnode = newVNode;\n\n\t\t\t// Invoke pre-render lifecycle methods\n\t\t\tif (isNew) {\n\t\t\t\tif (\n\t\t\t\t\tnewType.getDerivedStateFromProps == null &&\n\t\t\t\t\tc.componentWillMount != null\n\t\t\t\t) {\n\t\t\t\t\tc.componentWillMount();\n\t\t\t\t}\n\n\t\t\t\tif (c.componentDidMount != null) {\n\t\t\t\t\tc._renderCallbacks.push(c.componentDidMount);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (\n\t\t\t\t\tnewType.getDerivedStateFromProps == null &&\n\t\t\t\t\tnewProps !== oldProps &&\n\t\t\t\t\tc.componentWillReceiveProps != null\n\t\t\t\t) {\n\t\t\t\t\tc.componentWillReceiveProps(newProps, componentContext);\n\t\t\t\t}\n\n\t\t\t\tif (\n\t\t\t\t\t(!c._force &&\n\t\t\t\t\t\tc.shouldComponentUpdate != null &&\n\t\t\t\t\t\tc.shouldComponentUpdate(\n\t\t\t\t\t\t\tnewProps,\n\t\t\t\t\t\t\tc._nextState,\n\t\t\t\t\t\t\tcomponentContext\n\t\t\t\t\t\t) === false) ||\n\t\t\t\t\tnewVNode._original === oldVNode._original\n\t\t\t\t) {\n\t\t\t\t\t// More info about this here: https://gist.github.com/JoviDeCroock/bec5f2ce93544d2e6070ef8e0036e4e8\n\t\t\t\t\tif (newVNode._original !== oldVNode._original) {\n\t\t\t\t\t\t// When we are dealing with a bail because of sCU we have to update\n\t\t\t\t\t\t// the props, state and dirty-state.\n\t\t\t\t\t\t// when we are dealing with strict-equality we don't as the child could still\n\t\t\t\t\t\t// be dirtied see #3883\n\t\t\t\t\t\tc.props = newProps;\n\t\t\t\t\t\tc.state = c._nextState;\n\t\t\t\t\t\tc._dirty = false;\n\t\t\t\t\t}\n\t\t\t\t\tnewVNode._dom = oldVNode._dom;\n\t\t\t\t\tnewVNode._children = oldVNode._children;\n\t\t\t\t\tnewVNode._children.forEach(vnode => {\n\t\t\t\t\t\tif (vnode) vnode._parent = newVNode;\n\t\t\t\t\t});\n\n\t\t\t\t\tfor (let i = 0; i < c._stateCallbacks.length; i++) {\n\t\t\t\t\t\tc._renderCallbacks.push(c._stateCallbacks[i]);\n\t\t\t\t\t}\n\t\t\t\t\tc._stateCallbacks = [];\n\n\t\t\t\t\tif (c._renderCallbacks.length) {\n\t\t\t\t\t\tcommitQueue.push(c);\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak outer;\n\t\t\t\t}\n\n\t\t\t\tif (c.componentWillUpdate != null) {\n\t\t\t\t\tc.componentWillUpdate(newProps, c._nextState, componentContext);\n\t\t\t\t}\n\n\t\t\t\tif (c.componentDidUpdate != null) {\n\t\t\t\t\tc._renderCallbacks.push(() => {\n\t\t\t\t\t\tc.componentDidUpdate(oldProps, oldState, snapshot);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tc.context = componentContext;\n\t\t\tc.props = newProps;\n\t\t\tc._parentDom = parentDom;\n\n\t\t\tlet renderHook = options._render,\n\t\t\t\tcount = 0;\n\t\t\tif ('prototype' in newType && newType.prototype.render) {\n\t\t\t\tc.state = c._nextState;\n\t\t\t\tc._dirty = false;\n\n\t\t\t\tif (renderHook) renderHook(newVNode);\n\n\t\t\t\ttmp = c.render(c.props, c.state, c.context);\n\n\t\t\t\tfor (let i = 0; i < c._stateCallbacks.length; i++) {\n\t\t\t\t\tc._renderCallbacks.push(c._stateCallbacks[i]);\n\t\t\t\t}\n\t\t\t\tc._stateCallbacks = [];\n\t\t\t} else {\n\t\t\t\tdo {\n\t\t\t\t\tc._dirty = false;\n\t\t\t\t\tif (renderHook) renderHook(newVNode);\n\n\t\t\t\t\ttmp = c.render(c.props, c.state, c.context);\n\n\t\t\t\t\t// Handle setState called in render, see #2553\n\t\t\t\t\tc.state = c._nextState;\n\t\t\t\t} while (c._dirty && ++count < 25);\n\t\t\t}\n\n\t\t\t// Handle setState called in render, see #2553\n\t\t\tc.state = c._nextState;\n\n\t\t\tif (c.getChildContext != null) {\n\t\t\t\tglobalContext = assign(assign({}, globalContext), c.getChildContext());\n\t\t\t}\n\n\t\t\tif (!isNew && c.getSnapshotBeforeUpdate != null) {\n\t\t\t\tsnapshot = c.getSnapshotBeforeUpdate(oldProps, oldState);\n\t\t\t}\n\n\t\t\tlet isTopLevelFragment =\n\t\t\t\ttmp != null && tmp.type === Fragment && tmp.key == null;\n\t\t\tlet renderResult = isTopLevelFragment ? tmp.props.children : tmp;\n\n\t\t\tdiffChildren(\n\t\t\t\tparentDom,\n\t\t\t\tArray.isArray(renderResult) ? renderResult : [renderResult],\n\t\t\t\tnewVNode,\n\t\t\t\toldVNode,\n\t\t\t\tglobalContext,\n\t\t\t\tisSvg,\n\t\t\t\texcessDomChildren,\n\t\t\t\tcommitQueue,\n\t\t\t\toldDom,\n\t\t\t\tisHydrating\n\t\t\t);\n\n\t\t\tc.base = newVNode._dom;\n\n\t\t\t// We successfully rendered this VNode, unset any stored hydration/bailout state:\n\t\t\tnewVNode._hydrating = null;\n\n\t\t\tif (c._renderCallbacks.length) {\n\t\t\t\tcommitQueue.push(c);\n\t\t\t}\n\n\t\t\tif (clearProcessingException) {\n\t\t\t\tc._pendingError = c._processingException = null;\n\t\t\t}\n\n\t\t\tc._force = false;\n\t\t} else if (\n\t\t\texcessDomChildren == null &&\n\t\t\tnewVNode._original === oldVNode._original\n\t\t) {\n\t\t\tnewVNode._children = oldVNode._children;\n\t\t\tnewVNode._dom = oldVNode._dom;\n\t\t} else {\n\t\t\tnewVNode._dom = diffElementNodes(\n\t\t\t\toldVNode._dom,\n\t\t\t\tnewVNode,\n\t\t\t\toldVNode,\n\t\t\t\tglobalContext,\n\t\t\t\tisSvg,\n\t\t\t\texcessDomChildren,\n\t\t\t\tcommitQueue,\n\t\t\t\tisHydrating\n\t\t\t);\n\t\t}\n\n\t\tif ((tmp = options.diffed)) tmp(newVNode);\n\t} catch (e) {\n\t\tnewVNode._original = null;\n\t\t// if hydrating or creating initial tree, bailout preserves DOM:\n\t\tif (isHydrating || excessDomChildren != null) {\n\t\t\tnewVNode._dom = oldDom;\n\t\t\tnewVNode._hydrating = !!isHydrating;\n\t\t\texcessDomChildren[excessDomChildren.indexOf(oldDom)] = null;\n\t\t\t// ^ could possibly be simplified to:\n\t\t\t// excessDomChildren.length = 0;\n\t\t}\n\t\toptions._catchError(e, newVNode, oldVNode);\n\t}\n}\n\n/**\n * @param {Array<import('../internal').Component>} commitQueue List of components\n * which have callbacks to invoke in commitRoot\n * @param {import('../internal').VNode} root\n */\nexport function commitRoot(commitQueue, root) {\n\tif (options._commit) options._commit(root, commitQueue);\n\n\tcommitQueue.some(c => {\n\t\ttry {\n\t\t\t// @ts-ignore Reuse the commitQueue variable here so the type changes\n\t\t\tcommitQueue = c._renderCallbacks;\n\t\t\tc._renderCallbacks = [];\n\t\t\tcommitQueue.some(cb => {\n\t\t\t\t// @ts-ignore See above ts-ignore on commitQueue\n\t\t\t\tcb.call(c);\n\t\t\t});\n\t\t} catch (e) {\n\t\t\toptions._catchError(e, c._vnode);\n\t\t}\n\t});\n}\n\n/**\n * Diff two virtual nodes representing DOM element\n * @param {import('../internal').PreactElement} dom The DOM element representing\n * the virtual nodes being diffed\n * @param {import('../internal').VNode} newVNode The new virtual node\n * @param {import('../internal').VNode} oldVNode The old virtual node\n * @param {object} globalContext The current context object\n * @param {boolean} isSvg Whether or not this DOM node is an SVG node\n * @param {*} excessDomChildren\n * @param {Array<import('../internal').Component>} commitQueue List of components\n * which have callbacks to invoke in commitRoot\n * @param {boolean} isHydrating Whether or not we are in hydration\n * @returns {import('../internal').PreactElement}\n */\nfunction diffElementNodes(\n\tdom,\n\tnewVNode,\n\toldVNode,\n\tglobalContext,\n\tisSvg,\n\texcessDomChildren,\n\tcommitQueue,\n\tisHydrating\n) {\n\tlet oldProps = oldVNode.props;\n\tlet newProps = newVNode.props;\n\tlet nodeType = newVNode.type;\n\tlet i = 0;\n\n\t// Tracks entering and exiting SVG namespace when descending through the tree.\n\tif (nodeType === 'svg') isSvg = true;\n\n\tif (excessDomChildren != null) {\n\t\tfor (; i < excessDomChildren.length; i++) {\n\t\t\tconst child = excessDomChildren[i];\n\n\t\t\t// if newVNode matches an element in excessDomChildren or the `dom`\n\t\t\t// argument matches an element in excessDomChildren, remove it from\n\t\t\t// excessDomChildren so it isn't later removed in diffChildren\n\t\t\tif (\n\t\t\t\tchild &&\n\t\t\t\t'setAttribute' in child === !!nodeType &&\n\t\t\t\t(nodeType ? child.localName === nodeType : child.nodeType === 3)\n\t\t\t) {\n\t\t\t\tdom = child;\n\t\t\t\texcessDomChildren[i] = null;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\tif (dom == null) {\n\t\tif (nodeType === null) {\n\t\t\t// @ts-ignore createTextNode returns Text, we expect PreactElement\n\t\t\treturn document.createTextNode(newProps);\n\t\t}\n\n\t\tif (isSvg) {\n\t\t\tdom = document.createElementNS(\n\t\t\t\t'http://www.w3.org/2000/svg',\n\t\t\t\t// @ts-ignore We know `newVNode.type` is a string\n\t\t\t\tnodeType\n\t\t\t);\n\t\t} else {\n\t\t\tdom = document.createElement(\n\t\t\t\t// @ts-ignore We know `newVNode.type` is a string\n\t\t\t\tnodeType,\n\t\t\t\tnewProps.is && newProps\n\t\t\t);\n\t\t}\n\n\t\t// we created a new parent, so none of the previously attached children can be reused:\n\t\texcessDomChildren = null;\n\t\t// we are creating a new node, so we can assume this is a new subtree (in case we are hydrating), this deopts the hydrate\n\t\tisHydrating = false;\n\t}\n\n\tif (nodeType === null) {\n\t\t// During hydration, we still have to split merged text from SSR'd HTML.\n\t\tif (oldProps !== newProps && (!isHydrating || dom.data !== newProps)) {\n\t\t\tdom.data = newProps;\n\t\t}\n\t} else {\n\t\t// If excessDomChildren was not null, repopulate it with the current element's children:\n\t\texcessDomChildren = excessDomChildren && slice.call(dom.childNodes);\n\n\t\toldProps = oldVNode.props || EMPTY_OBJ;\n\n\t\tlet oldHtml = oldProps.dangerouslySetInnerHTML;\n\t\tlet newHtml = newProps.dangerouslySetInnerHTML;\n\n\t\t// During hydration, props are not diffed at all (including dangerouslySetInnerHTML)\n\t\t// @TODO we should warn in debug mode when props don't match here.\n\t\tif (!isHydrating) {\n\t\t\t// But, if we are in a situation where we are using existing DOM (e.g. replaceNode)\n\t\t\t// we should read the existing DOM attributes to diff them\n\t\t\tif (excessDomChildren != null) {\n\t\t\t\toldProps = {};\n\t\t\t\tfor (i = 0; i < dom.attributes.length; i++) {\n\t\t\t\t\toldProps[dom.attributes[i].name] = dom.attributes[i].value;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (newHtml || oldHtml) {\n\t\t\t\t// Avoid re-applying the same '__html' if it did not changed between re-render\n\t\t\t\tif (\n\t\t\t\t\t!newHtml ||\n\t\t\t\t\t((!oldHtml || newHtml.__html != oldHtml.__html) &&\n\t\t\t\t\t\tnewHtml.__html !== dom.innerHTML)\n\t\t\t\t) {\n\t\t\t\t\tdom.innerHTML = (newHtml && newHtml.__html) || '';\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tdiffProps(dom, newProps, oldProps, isSvg, isHydrating);\n\n\t\t// If the new vnode didn't have dangerouslySetInnerHTML, diff its children\n\t\tif (newHtml) {\n\t\t\tnewVNode._children = [];\n\t\t} else {\n\t\t\ti = newVNode.props.children;\n\t\t\tdiffChildren(\n\t\t\t\tdom,\n\t\t\t\tArray.isArray(i) ? i : [i],\n\t\t\t\tnewVNode,\n\t\t\t\toldVNode,\n\t\t\t\tglobalContext,\n\t\t\t\tisSvg && nodeType !== 'foreignObject',\n\t\t\t\texcessDomChildren,\n\t\t\t\tcommitQueue,\n\t\t\t\texcessDomChildren\n\t\t\t\t\t? excessDomChildren[0]\n\t\t\t\t\t: oldVNode._children && getDomSibling(oldVNode, 0),\n\t\t\t\tisHydrating\n\t\t\t);\n\n\t\t\t// Remove children that are not part of any vnode.\n\t\t\tif (excessDomChildren != null) {\n\t\t\t\tfor (i = excessDomChildren.length; i--; ) {\n\t\t\t\t\tif (excessDomChildren[i] != null) removeNode(excessDomChildren[i]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// (as above, don't diff props during hydration)\n\t\tif (!isHydrating) {\n\t\t\tif (\n\t\t\t\t'value' in newProps &&\n\t\t\t\t(i = newProps.value) !== undefined &&\n\t\t\t\t// #2756 For the <progress>-element the initial value is 0,\n\t\t\t\t// despite the attribute not being present. When the attribute\n\t\t\t\t// is missing the progress bar is treated as indeterminate.\n\t\t\t\t// To fix that we'll always update it when it is 0 for progress elements\n\t\t\t\t(i !== dom.value ||\n\t\t\t\t\t(nodeType === 'progress' && !i) ||\n\t\t\t\t\t// This is only for IE 11 to fix <select> value not being updated.\n\t\t\t\t\t// To avoid a stale select value we need to set the option.value\n\t\t\t\t\t// again, which triggers IE11 to re-evaluate the select value\n\t\t\t\t\t(nodeType === 'option' && i !== oldProps.value))\n\t\t\t) {\n\t\t\t\tsetProperty(dom, 'value', i, oldProps.value, false);\n\t\t\t}\n\t\t\tif (\n\t\t\t\t'checked' in newProps &&\n\t\t\t\t(i = newProps.checked) !== undefined &&\n\t\t\t\ti !== dom.checked\n\t\t\t) {\n\t\t\t\tsetProperty(dom, 'checked', i, oldProps.checked, false);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn dom;\n}\n\n/**\n * Invoke or update a ref, depending on whether it is a function or object ref.\n * @param {object|function} ref\n * @param {any} value\n * @param {import('../internal').VNode} vnode\n */\nexport function applyRef(ref, value, vnode) {\n\ttry {\n\t\tif (typeof ref == 'function') ref(value);\n\t\telse ref.current = value;\n\t} catch (e) {\n\t\toptions._catchError(e, vnode);\n\t}\n}\n\n/**\n * Unmount a virtual node from the tree and apply DOM changes\n * @param {import('../internal').VNode} vnode The virtual node to unmount\n * @param {import('../internal').VNode} parentVNode The parent of the VNode that\n * initiated the unmount\n * @param {boolean} [skipRemove] Flag that indicates that a parent node of the\n * current element is already detached from the DOM.\n */\nexport function unmount(vnode, parentVNode, skipRemove) {\n\tlet r;\n\tif (options.unmount) options.unmount(vnode);\n\n\tif ((r = vnode.ref)) {\n\t\tif (!r.current || r.current === vnode._dom) {\n\t\t\tapplyRef(r, null, parentVNode);\n\t\t}\n\t}\n\n\tif ((r = vnode._component) != null) {\n\t\tif (r.componentWillUnmount) {\n\t\t\ttry {\n\t\t\t\tr.componentWillUnmount();\n\t\t\t} catch (e) {\n\t\t\t\toptions._catchError(e, parentVNode);\n\t\t\t}\n\t\t}\n\n\t\tr.base = r._parentDom = null;\n\t\tvnode._component = undefined;\n\t}\n\n\tif ((r = vnode._children)) {\n\t\tfor (let i = 0; i < r.length; i++) {\n\t\t\tif (r[i]) {\n\t\t\t\tunmount(\n\t\t\t\t\tr[i],\n\t\t\t\t\tparentVNode,\n\t\t\t\t\tskipRemove || typeof vnode.type !== 'function'\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (!skipRemove && vnode._dom != null) {\n\t\tremoveNode(vnode._dom);\n\t}\n\n\t// Must be set to `undefined` to properly clean up `_nextDom`\n\t// for which `null` is a valid value. See comment in `create-element.js`\n\tvnode._parent = vnode._dom = vnode._nextDom = undefined;\n}\n\n/** The `.render()` method for a PFC backing instance. */\nfunction doRender(props, state, context) {\n\treturn this.constructor(props, context);\n}\n","import { EMPTY_OBJ } from './constants';\nimport { commitRoot, diff } from './diff/index';\nimport { createElement, Fragment } from './create-element';\nimport options from './options';\nimport { slice } from './util';\n\n/**\n * Render a Preact virtual node into a DOM element\n * @param {import('./internal').ComponentChild} vnode The virtual node to render\n * @param {import('./internal').PreactElement} parentDom The DOM element to\n * render into\n * @param {import('./internal').PreactElement | object} [replaceNode] Optional: Attempt to re-use an\n * existing DOM tree rooted at `replaceNode`\n */\nexport function render(vnode, parentDom, replaceNode) {\n\tif (options._root) options._root(vnode, parentDom);\n\n\t// We abuse the `replaceNode` parameter in `hydrate()` to signal if we are in\n\t// hydration mode or not by passing the `hydrate` function instead of a DOM\n\t// element..\n\tlet isHydrating = typeof replaceNode === 'function';\n\n\t// To be able to support calling `render()` multiple times on the same\n\t// DOM node, we need to obtain a reference to the previous tree. We do\n\t// this by assigning a new `_children` property to DOM nodes which points\n\t// to the last rendered tree. By default this property is not present, which\n\t// means that we are mounting a new tree for the first time.\n\tlet oldVNode = isHydrating\n\t\t? null\n\t\t: (replaceNode && replaceNode._children) || parentDom._children;\n\n\tvnode = (\n\t\t(!isHydrating && replaceNode) ||\n\t\tparentDom\n\t)._children = createElement(Fragment, null, [vnode]);\n\n\t// List of effects that need to be called after diffing.\n\tlet commitQueue = [];\n\tdiff(\n\t\tparentDom,\n\t\t// Determine the new vnode tree and store it on the DOM element on\n\t\t// our custom `_children` property.\n\t\tvnode,\n\t\toldVNode || EMPTY_OBJ,\n\t\tEMPTY_OBJ,\n\t\tparentDom.ownerSVGElement !== undefined,\n\t\t!isHydrating && replaceNode\n\t\t\t? [replaceNode]\n\t\t\t: oldVNode\n\t\t\t? null\n\t\t\t: parentDom.firstChild\n\t\t\t? slice.call(parentDom.childNodes)\n\t\t\t: null,\n\t\tcommitQueue,\n\t\t!isHydrating && replaceNode\n\t\t\t? replaceNode\n\t\t\t: oldVNode\n\t\t\t? oldVNode._dom\n\t\t\t: parentDom.firstChild,\n\t\tisHydrating\n\t);\n\n\t// Flush all queued effects\n\tcommitRoot(commitQueue, vnode);\n}\n\n/**\n * Update an existing DOM element with data from a Preact virtual node\n * @param {import('./internal').ComponentChild} vnode The virtual node to render\n * @param {import('./internal').PreactElement} parentDom The DOM element to\n * update\n */\nexport function hydrate(vnode, parentDom) {\n\trender(vnode, parentDom, hydrate);\n}\n","/**\n * Find the closest error boundary to a thrown error and call it\n * @param {object} error The thrown value\n * @param {import('../internal').VNode} vnode The vnode that threw\n * the error that was caught (except for unmounting when this parameter\n * is the highest parent that was being unmounted)\n * @param {import('../internal').VNode} [oldVNode]\n * @param {import('../internal').ErrorInfo} [errorInfo]\n */\nexport function _catchError(error, vnode, oldVNode, errorInfo) {\n\t/** @type {import('../internal').Component} */\n\tlet component, ctor, handled;\n\n\tfor (; (vnode = vnode._parent); ) {\n\t\tif ((component = vnode._component) && !component._processingException) {\n\t\t\ttry {\n\t\t\t\tctor = component.constructor;\n\n\t\t\t\tif (ctor && ctor.getDerivedStateFromError != null) {\n\t\t\t\t\tcomponent.setState(ctor.getDerivedStateFromError(error));\n\t\t\t\t\thandled = component._dirty;\n\t\t\t\t}\n\n\t\t\t\tif (component.componentDidCatch != null) {\n\t\t\t\t\tcomponent.componentDidCatch(error, errorInfo || {});\n\t\t\t\t\thandled = component._dirty;\n\t\t\t\t}\n\n\t\t\t\t// This is an error boundary. Mark it as having bailed out, and whether it was mid-hydration.\n\t\t\t\tif (handled) {\n\t\t\t\t\treturn (component._pendingError = component);\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\terror = e;\n\t\t\t}\n\t\t}\n\t}\n\n\tthrow error;\n}\n","import { options, Fragment } from 'preact';\n\n/** @typedef {import('preact').VNode} VNode */\n\nlet vnodeId = 0;\n\n/**\n * @fileoverview\n * This file exports various methods that implement Babel's \"automatic\" JSX runtime API:\n * - jsx(type, props, key)\n * - jsxs(type, props, key)\n * - jsxDEV(type, props, key, __source, __self)\n *\n * The implementation of createVNode here is optimized for performance.\n * Benchmarks: https://esbench.com/bench/5f6b54a0b4632100a7dcd2b3\n */\n\n/**\n * JSX.Element factory used by Babel's {runtime:\"automatic\"} JSX transform\n * @param {VNode['type']} type\n * @param {VNode['props']} props\n * @param {VNode['key']} [key]\n * @param {unknown} [isStaticChildren]\n * @param {unknown} [__source]\n * @param {unknown} [__self]\n */\nfunction createVNode(type, props, key, isStaticChildren, __source, __self) {\n\t// We'll want to preserve `ref` in props to get rid of the need for\n\t// forwardRef components in the future, but that should happen via\n\t// a separate PR.\n\tlet normalizedProps = {},\n\t\tref,\n\t\ti;\n\tfor (i in props) {\n\t\tif (i == 'ref') {\n\t\t\tref = props[i];\n\t\t} else {\n\t\t\tnormalizedProps[i] = props[i];\n\t\t}\n\t}\n\n\tconst vnode = {\n\t\ttype,\n\t\tprops: normalizedProps,\n\t\tkey,\n\t\tref,\n\t\t_children: null,\n\t\t_parent: null,\n\t\t_depth: 0,\n\t\t_dom: null,\n\t\t_nextDom: undefined,\n\t\t_component: null,\n\t\t_hydrating: null,\n\t\tconstructor: undefined,\n\t\t_original: --vnodeId,\n\t\t__source,\n\t\t__self\n\t};\n\n\t// If a Component VNode, check for and apply defaultProps.\n\t// Note: `type` is often a String, and can be `undefined` in development.\n\tif (typeof type === 'function' && (ref = type.defaultProps)) {\n\t\tfor (i in ref)\n\t\t\tif (typeof normalizedProps[i] === 'undefined') {\n\t\t\t\tnormalizedProps[i] = ref[i];\n\t\t\t}\n\t}\n\n\tif (options.vnode) options.vnode(vnode);\n\treturn vnode;\n}\n\nexport {\n\tcreateVNode as jsx,\n\tcreateVNode as jsxs,\n\tcreateVNode as jsxDEV,\n\tFragment\n};\n","if (process.env.NODE_ENV === \"development\") {\n  require(\"preact/debug\");\n}\n\nimport { render } from \"preact\";\nimport { App } from \"./app/app\";\n\nrender(<App />, document.getElementById(\"root\"));\n","import { FC } from \"react\";\n\nimport * as styles from \"./app.module.scss\";\n\nexport const App: FC = () => (\n  <div className={styles.hello_world}>\n    <h1>Hello World!</h1>\n  </div>\n);\n",".hello_world {\n  width: 100%;\n  text-align: center;\n\n  h1 {\n    color: #222;\n  }\n}\n"],"names":["slice","options","vnodeId","inEvent","rerenderQueue","prevDebounce","microTick","EMPTY_OBJ","EMPTY_ARR","IS_NON_DIMENSIONAL","assign","obj","props","i","removeNode","node","parentNode","removeChild","createVNode","type","key","ref","original","vnode","__k","__","__b","__e","__d","__c","__h","constructor","__v","Fragment","children","setStyle","style","value","setProperty","test","dom","name","oldValue","isSvg","useCapture","o","cssText","replace","toLowerCase","l","addEventListener","eventProxyCapture","eventProxy","removeEventListener","e","indexOf","removeAttribute","setAttribute","this","event","Component","context","getDomSibling","childIndex","sibling","length","updateParentDomPointers","child","base","defer","cb","setTimeout","enqueueRender","c","push","process","__r","debounceRendering","renderQueueLength","component","commitQueue","oldVNode","oldDom","parentDom","sort","a","b","shift","__P","diff","ownerSVGElement","commitRoot","diffChildren","renderResult","newParentVNode","oldParentVNode","globalContext","excessDomChildren","isHydrating","j","childVNode","newDom","firstChildDom","refs","oldChildren","oldChildrenLength","Array","isArray","reorderChildren","placeChild","getLastDom","nextSibling","unmount","applyRef","tmp","nextDom","sibDom","outer","appendChild","insertBefore","lastDom","newVNode","isNew","oldProps","oldState","snapshot","clearProcessingException","newProps","provider","componentContext","renderHook","count","newType","contextType","__E","prototype","render","doRender","sub","state","_sb","__s","getDerivedStateFromProps","componentWillMount","componentDidMount","componentWillReceiveProps","shouldComponentUpdate","forEach","componentWillUpdate","componentDidUpdate","getChildContext","getSnapshotBeforeUpdate","oldHtml","newHtml","nodeType","localName","document","createTextNode","createElementNS","createElement","is","data","call","childNodes","dangerouslySetInnerHTML","attributes","__html","innerHTML","hydrate","diffProps","checked","diffElementNodes","diffed","root","some","current","parentVNode","skipRemove","r","componentWillUnmount","replaceNode","normalizedProps","arguments","defaultProps","firstChild","error","errorInfo","ctor","handled","getDerivedStateFromError","setState","componentDidCatch","update","callback","s","forceUpdate","Promise","then","bind","resolve","isStaticChildren","__source","__self","$9518a5d2394de5e4$export$b3890eb0ae9dca99","$ed50b336dafca5f4$export$34b9dba7ce09269b","className","getElementById"],"version":3,"file":"index.bc5a68dd.js.map"}